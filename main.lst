main                                                                                                                    PAGE 1
0149 120011              1     call    init_keypad
0003 12014A              2     call    init_calculator
0006 120168              3     call    clear_display
                         4
                         5     main_loop:
0009 12014E              6             CALL    read_number
                         7
                         8             ;CALL   calculate
                         9             ;CALL   write_number
                        10
000C 12016F             11             CALL    display_number
000F 80F8               12             JMP     main_loop
                        13
                        14
                        15
                        16
                 =1     17     include 'keypad.asm'
                 =1     18     init_keypad:
  0041           =1     19             last    EQU     0x41
0011 7541FF      =1     20             MOV     last,   #0FFH
0014 22          =1     21             RET
                 =1     22
                 =1     23     ;--------------------------------------------------------------------------
                 =1     24     ; Reads the keypad until a button is pressed
                 =1     25     ; Output:
                 =1     26     ;       A: The value of the pressed button
                 =1     27     ; Values:
                 =1     28     ; 00 - 09 -> Numeric vallues 0-9
                 =1     29     ; 10 | 0001 0000 -> A
                 =1     30     ; 20 | 0010 0000 -> B
                 =1     31     ; 40 | 0100 0000 -> C
                 =1     32     ; 80 | 1000 0000 -> D
                 =1     33     ; F0 | 1111 0000 -> #
                 =1     34     ;--------------------------------------------------------------------------
                 =1     35     read_keypad:
0015 12016F      =1     36             CALL    display_number
                 =1     37             ; Setup
0018 75A0FF      =1     38             MOV     P2,     #0FFH
  0042           =1     39             mask    EQU     0x42
  0043           =1     40             i       EQU     0x43
001B 754304      =1     41             MOV     i,      #4d
001E 7542FE      =1     42             MOV     mask,   #11111110b
                 =1     43             ; Loop i times
                 =1     44     keypad_line_loop:
0021 8542A0      =1     45             MOV     P2,     mask
                 =1     46
                 =1     47             ; Check wether a key in this line is pressed
0024 E5A0        =1     48             MOV     A,      P2
0026 54F0        =1     49             ANL     A,      #0F0H
0028 B4F00D      =1     50             CJNE    A, #0F0h, keypad_map_value ; Found a pressed key
                 =1     51
                 =1     52             ; Shift mask one to the left (read next line)
002B E542        =1     53             MOV     A,      mask
002D 23          =1     54             RL      A
002E F542        =1     55             MOV     mask,   A
                 =1     56
                 =1     57             ; Decrement loop counter
0030 D543EE      =1     58             DJNZ    i,      keypad_line_loop
                 =1     59             ; No key pressed in this iteration
0033 7541FF      =1     60             MOV     last,   #0FFH
0036 80DD        =1     61             JMP     read_keypad ; Read again
                 =1     62     keypad_map_value:
0038 E5A0        =1     63             MOV     A,      P2
003A 120045      =1     64             CALL    map_value ; A contains the mapped value now
003D B54102      =1     65             CJNE    A, last, keypad_return ; Read the same value as last time (no change)
0040 80D3        =1     66             JMP     read_keypad
                 =1     67     keypad_return:
0042 F541        =1     68             MOV     last,   A
0044 22          =1     69             RET ; A is a new value, return
                 =1     70
                 =1     71     ;--------------------------------------------------------------------------
                 =1     72     ; Maps value of A to another value listed in "map_table"
                 =1     73     ; input:
                 =1     74     ;       A: The value to map
                 =1     75     ; output:
                 =1     76     ;       A: The mapped value
                 =1     77     ;--------------------------------------------------------------------------
                 =1     78     map_value:
0045 90004A      =1     79             MOV     DPTR,   #map_table      ; point DPTR at start of table
                 =1     80             ; A already contains your input byte
0048 93          =1     81             MOVC    A,      @A+DPTR        ; A := map_table[A]
0049 22          =1     82             RET
                 =1     83
                 =1     84
                 =1     85     ;--------------------------------------------------------------------------
                 =1     86     ; 256-byte mapping table in code memory
                 =1     87     ; index = input value in A
                 =1     88     ; value = mapped output
                 =1     89     ;--------------------------------------------------------------------------
                 =1     90     map_table:
004A FFFFFFFFFF  =1     91             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
005A FFFFFFFFFF  =1     92             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
006A FFFFFFFFFF  =1     93             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
007A FFFFFFFFFF  =1     94             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
008A FFFFFFFFFF  =1     95             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
009A FFFFFFFFFF  =1     96             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
00AA FFFFFFFFFF  =1     97             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
00BA FFFFFFFFFF  =1     98             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 80h,  0FFh, 0FFh, 0FFh, 40h,  0FFh, 20h,  10h,
     FFFF80FFFF
     FF40FF2010
     FF
00CA FFFFFFFFFF  =1     99             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
00DA FFFFFFFFFF  =1    100             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
00EA FFFFFFFFFF  =1    101             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
00FA FFFFFFFFFF  =1    102             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F0h, 0FFh, 0FFh, 0FFh, 09h,  0FFh, 06h,  03h,
     FFFFF0FFFF
     FF09FF0603
     FF
010A FFFFFFFFFF  =1    103             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
011A FFFFFFFFFF  =1    104             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 00h,  0FFh, 0FFh, 0FFh, 08h,  0FFh, 05h,  02h,
     FFFF00FFFF
     FF08FF0502
     FF
012A FFFFFFFFFF  =1    105             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 07h,  0FFh, 04h,  01h,
     FFFFFFFFFF
     FF07FF0401
     FF
013A FFFFFFFFFF  =1    106             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
                 =1    107
                 =1    108      ;include 'display.asm'
                 =1    109     include 'calculator.asm'
                 =1    110     init_calculator:
  0048           =1    111             display EQU     0x48
014A 850048      =1    112             MOV     display,0
014D 22          =1    113             RET
                 =1    114
                 =1    115     ;--------------------------------------------------------------------------
                 =1    116     ; Reads numbers until an action key is pressed
                 =1    117     ; Outputs:
                 =1    118     ;       A: The read number
                 =1    119     ;       B: The action key terminating the input (see keypad)
                 =1    120     ;--------------------------------------------------------------------------
                 =1    121     read_number:
  0030           =1    122             num     EQU     0x30
014E 850030      =1    123             MOV     num,    0
                 =1    124     calculator_read_number_loop:
0151 1115        =1    125             CALL    read_keypad
0153 F8          =1    126             MOV     R0,     A
0154 54F0        =1    127             ANL     A,      #0F0H
0156 700B        =1    128             JNZ     calculator_ret ; Actions are not 0 -> handle end of number reading
0158 E530        =1    129             MOV     A,      num
015A 75F00A      =1    130             MOV     B,      #10d
015D A4          =1    131             MUL     AB
015E 28          =1    132             ADD     A,      R0
015F F530        =1    133             MOV     num,    A
0161 80EE        =1    134             JMP     calculator_read_number_loop
                 =1    135     calculator_ret:
0163 E530        =1    136             MOV     A,      num
0165 88F0        =1    137             MOV     B,      R0
0167 22          =1    138             RET
                 =1    139
                 =1    140
                 =1    141     include 'display.asm'
                 =1    142     ;--------------------------------------
                 =1    143     ; Declarations
                 =1    144     ;--------------------------------------
                 =1    145     ; Interopt Declarations
  0030           =1    146     numberMemLo DATA 30h
  0031           =1    147     numberMemHi DATA 31h
  0032           =1    148     displayMem DATA 32h
                 =1    149
                 =1    150     ; Port Declarations
  0080           =1    151     segmentSelectPort EQU P0
  0090           =1    152     segmentShowPort EQU P1
                 =1    153
                 =1    154     ; Declarations for Division
  0033           =1    155     numberLo DATA 33h
  0034           =1    156     numberHi DATA 34h
  0035           =1    157     divLo DATA 35h
  0036           =1    158     divHi DATA 36h
  0037           =1    159     quotLo DATA 37h
  0038           =1    160     quotHi DATA 38h
  0033           =1    161     remLo DATA 33h
  0034           =1    162     remHi DATA 34h
                 =1    163
                 =1    164     ;--------------------------------------
                 =1    165     ; Display
                 =1    166     ;--------------------------------------
                 =1    167     clear_display:
0168 759000      =1    168         MOV segmentShowPort, #00h
016B 758000      =1    169         MOV segmentSelectPort, #00h
016E 22          =1    170         RET
                 =1    171
                 =1    172     display_number:
                 =1    173         ; DIV 1000
016F 853134      =1    174         MOV numberHi, numberMemHi
0172 853033      =1    175         MOV numberLo, numberMemLo
0175 753603      =1    176         MOV divHi, #03h
0178 7535E8      =1    177         MOV divLo, #0E8h
017B 1201C9      =1    178         CALL div16x16
                 =1    179
017E E537        =1    180         MOV A, quotLo
0180 2480        =1    181         ADD A, #80h
0182 F532        =1    182         MOV displayMem, A
0184 1201AB      =1    183         CALL display_digit
                 =1    184
                 =1    185         ; DIV 100
0187 E533        =1    186         MOV A, remLo
0189 75F064      =1    187         MOV B, #64h
018C 84          =1    188         DIV AB
018D 2440        =1    189         ADD A, #40h
018F F532        =1    190         MOV displayMem, A
0191 1201AB      =1    191         CALL display_digit
                 =1    192
                 =1    193         ; DIV 10
0194 E5F0        =1    194         MOV A, B
0196 75F00A      =1    195         MOV B, #0Ah
0199 84          =1    196         DIV AB
019A 2420        =1    197         ADD A, #20h
019C F532        =1    198         MOV displayMem, A
019E 1201AB      =1    199         CALL display_digit
                 =1    200
                 =1    201         ; REMAINING
01A1 E5F0        =1    202         MOV A, B
01A3 2410        =1    203         ADD A, #10h
01A5 F532        =1    204         MOV displayMem, A
01A7 1201AB      =1    205         CALL display_digit
                 =1    206
01AA 22          =1    207         RET
                 =1    208
                 =1    209     ; Reads displayMem where 000[3 bits pos][4 bits for digit] and sets P1 and P0 corresponding
                 =1    210     ;   posBits: [3rd pos][2nd pos][1st pos][0th pos]
                 =1    211     ;   digitBits: just binary counting up 0-9
                 =1    212     display_digit:
                 =1    213         ; get digit in dec
01AB E532        =1    214         MOV A, displayMem
01AD 540F        =1    215         ANL A, #0Fh ; A = 0-9
                 =1    216
                 =1    217         ; set P0(segments)
01AF 9001BF      =1    218         MOV DPTR, #DEC_SEGMENT_MAP
01B2 93          =1    219         MOVC A, @A+DPTR
01B3 F580        =1    220         MOV segmentSelectPort, A
                 =1    221
                 =1    222         ; get pos and set P1(position)
01B5 E532        =1    223         MOV A, displayMem
01B7 C4          =1    224         SWAP A
01B8 540F        =1    225         ANL A, #0Fh
01BA F590        =1    226         MOV segmentShowPort, A
                 =1    227
01BC 3168        =1    228         CALL clear_display
01BE 22          =1    229         RET
                 =1    230
                 =1    231     ; Mapping Segmente auf P1
                 =1    232     ; A -> 7.bit
                 =1    233     ; B -> 6.bit
                 =1    234     ; C -> 5.bit
                 =1    235     ; D -> 4.bit
                 =1    236     ; E -> 3.bit
                 =1    237     ; F -> 2.bit
                 =1    238     ; G -> 1.bit
                 =1    239     ; P -> 0.bit
                 =1    240     DEC_SEGMENT_MAP:
01BF FC          =1    241         DB 0xFC ; 0 -> A B C D E F           = 11111100
01C0 60          =1    242         DB 0x60 ; 1 ->   B C                 = 01100000
01C1 DA          =1    243         DB 0xDA ; 2 -> A B   D E   G         = 11011010
01C2 F2          =1    244         DB 0xF2 ; 3 -> A B C D     G         = 11110010
01C3 66          =1    245         DB 0x66 ; 4 ->   B C     F G         = 01100110
01C4 B6          =1    246         DB 0xB6 ; 5 -> A   C D   F G         = 10110110
01C5 BE          =1    247         DB 0xBE ; 6 -> A   C D E F G         = 10111110
01C6 E0          =1    248         DB 0xE0 ; 7 -> A B C                 = 11100000
01C7 FE          =1    249         DB 0xFE ; 8 -> A B C D E F G         = 11111110
01C8 F6          =1    250         DB 0xF6 ; 9 -> A B C D   F G         = 11110110
                 =1    251
                 =1    252
                 =1    253
                 =1    254     ;--------------------------------------
                 =1    255     ; 16x16 Division
                 =1    256     ;--------------------------------------
                 =1    257     div16x16:
                 =1    258        ; Rem equ DIV
01C9 853333      =1    259        MOV remLo, numberLo
01CC 853434      =1    260        MOV remHi, numberHi
                 =1    261
                 =1    262         ; Quot init 0
01CF 753700      =1    263         MOV quotLo, #0
01D2 753800      =1    264         MOV quotHi, #0
                 =1    265
01D5 1201D9      =1    266         CALL div_loop16x16
01D8 22          =1    267         RET
                 =1    268
                 =1    269     div_loop16x16:
                 =1    270         ; Prüfe ob Rest >= Divisor (16-Bit Vergleich)
                 =1    271
01D9 E534        =1    272         MOV A, remHi
01DB C3          =1    273         CLR C
01DC 9536        =1    274         SUBB A, divHi
01DE 4027        =1    275         JC div_done       ; Rest High < Divisor High → Rest < Divisor
                 =1    276
01E0 6003        =1    277         JZ check_low      ; Wenn equal, prüfe Low-Bytes
                 =1    278
                 =1    279         ; Rest High > Divisor High → subtrahieren möglich
01E2 0201EC      =1    280         JMP do_subtract
                 =1    281
                 =1    282     check_low:
01E5 E533        =1    283         MOV A, remLo
01E7 C3          =1    284         CLR C
01E8 9535        =1    285         SUBB A, divLo
01EA 401B        =1    286         JC div_done       ; Rest Low < Divisor Low → Rest < Divisor
                 =1    287
                 =1    288         ; Rest >= Divisor → Subtraktion möglich
                 =1    289
                 =1    290     do_subtract:
                 =1    291         ; Subtrahiere Divisor von Rest
01EC E533        =1    292         MOV A, remLo
01EE C3          =1    293         CLR C
01EF 9535        =1    294         SUBB A, divLo
01F1 F533        =1    295         MOV remLo, A
                 =1    296
01F3 E534        =1    297         MOV A, remHi
01F5 9536        =1    298         SUBB A, divHi
01F7 F534        =1    299         MOV remHi, A
                 =1    300
                 =1    301         ; Quotient erhöhen (16-Bit)
01F9 E537        =1    302         MOV A, quotLo
01FB 04          =1    303         INC A
01FC F537        =1    304         MOV quotLo, A
01FE 7005        =1    305         JNZ continue_loop
                 =1    306         ; Überlauf in Low-Byte → High-Byte erhöhen
0200 E538        =1    307         MOV A, quotHi
0202 04          =1    308         INC A
0203 F538        =1    309         MOV quotHi, A
                 =1    310
                 =1    311     continue_loop:
0205 80D2        =1    312         JMP div_loop16x16
                 =1    313
                 =1    314     div_done:
0207 22          =1    315         RET
                 =1    316
                 =1    317     ;--------------------------------------
                 =1    318     ; Wait loop
                 =1    319     ;--------------------------------------
                 =1    320     wait_loop:
0208 7A0A        =1    321         MOV R2, #10
                 =1    322     wait_outer:
020A 790A        =1    323         MOV R1, #10
                 =1    324     wait_inner:
020C D9FE        =1    325         DJNZ R1, wait_inner
020E DAFA        =1    326         DJNZ R2, wait_outer
0210 22          =1    327         RET
                 =1    328
                 =1    329     END
ASSEMBLY COMPLETE, NO ERRORS FOUND, NO WARNINGS


SYMBOL TABLE:
??MCU_8051_IDE . . . . . . . . . . .  N  NUMB  8051H  NOT USED
??VERSION. . . . . . . . . . . . . .  N  NUMB  0149H  NOT USED
AC . . . . . . . . . . . . . . . . .  B  ADDR  00D6H  NOT USED
ACC. . . . . . . . . . . . . . . . .  D  ADDR  00E0H  NOT USED
ACSR . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
ADCF . . . . . . . . . . . . . . . .  D  ADDR  00F6H  NOT USED
ADCLK. . . . . . . . . . . . . . . .  D  ADDR  00F2H  NOT USED
ADCON. . . . . . . . . . . . . . . .  D  ADDR  00F3H  NOT USED
ADDH . . . . . . . . . . . . . . . .  D  ADDR  00F5H  NOT USED
ADDL . . . . . . . . . . . . . . . .  D  ADDR  00F4H  NOT USED
AUXR . . . . . . . . . . . . . . . .  D  ADDR  008EH  NOT USED
AUXR1. . . . . . . . . . . . . . . .  D  ADDR  00A2H  NOT USED
B. . . . . . . . . . . . . . . . . .  D  ADDR  00F0H
BDRCON . . . . . . . . . . . . . . .  D  ADDR  009BH  NOT USED
BDRCON_1 . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
BRL. . . . . . . . . . . . . . . . .  D  ADDR  009AH  NOT USED
CALCULATOR_READ_NUMBER_LOOP. . . . .  C  ADDR  0151H
CALCULATOR_RET . . . . . . . . . . .  C  ADDR  0163H
CCAP0H . . . . . . . . . . . . . . .  D  ADDR  00FAH  NOT USED
CCAP0L . . . . . . . . . . . . . . .  D  ADDR  00EAH  NOT USED
CCAP1H . . . . . . . . . . . . . . .  D  ADDR  00FBH  NOT USED
CCAP1L . . . . . . . . . . . . . . .  D  ADDR  00EBH  NOT USED
CCAP2H . . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAP3H . . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAP4H . . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL2H. . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAPL2L. . . . . . . . . . . . . . .  D  ADDR  00ECH  NOT USED
CCAPL3H. . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAPL3L. . . . . . . . . . . . . . .  D  ADDR  00EDH  NOT USED
CCAPL4H. . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL4L. . . . . . . . . . . . . . .  D  ADDR  00EEH  NOT USED
CCAPM0 . . . . . . . . . . . . . . .  D  ADDR  00DAH  NOT USED
CCAPM1 . . . . . . . . . . . . . . .  D  ADDR  00DBH  NOT USED
CCAPM2 . . . . . . . . . . . . . . .  D  ADDR  00DCH  NOT USED
CCAPM3 . . . . . . . . . . . . . . .  D  ADDR  00DDH  NOT USED
CCAPM4 . . . . . . . . . . . . . . .  D  ADDR  00DEH  NOT USED
CCF0 . . . . . . . . . . . . . . . .  B  ADDR  00D8H  NOT USED
CCF1 . . . . . . . . . . . . . . . .  B  ADDR  00D9H  NOT USED
CCF2 . . . . . . . . . . . . . . . .  B  ADDR  00DAH  NOT USED
CCF3 . . . . . . . . . . . . . . . .  B  ADDR  00DBH  NOT USED
CCF4 . . . . . . . . . . . . . . . .  B  ADDR  00DCH  NOT USED
CCON . . . . . . . . . . . . . . . .  D  ADDR  00D8H  NOT USED
CFINT. . . . . . . . . . . . . . . .  C  ADDR  0033H  NOT USED
CH . . . . . . . . . . . . . . . . .  D  ADDR  00F9H  NOT USED
CHECK_LOW. . . . . . . . . . . . . .  C  ADDR  01E5H
CKCON. . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKCON0 . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKRL . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
CKSEL. . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
CL . . . . . . . . . . . . . . . . .  D  ADDR  00E9H  NOT USED
CLEAR_DISPLAY. . . . . . . . . . . .  C  ADDR  0168H
CLKREG . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CMOD . . . . . . . . . . . . . . . .  D  ADDR  00D9H  NOT USED
CONTINUE_LOOP. . . . . . . . . . . .  C  ADDR  0205H
CPRL2. . . . . . . . . . . . . . . .  B  ADDR  00C8H  NOT USED
CR . . . . . . . . . . . . . . . . .  B  ADDR  00DEH  NOT USED
CT2. . . . . . . . . . . . . . . . .  B  ADDR  00C9H  NOT USED
CY . . . . . . . . . . . . . . . . .  B  ADDR  00D7H  NOT USED
DEC_SEGMENT_MAP. . . . . . . . . . .  C  ADDR  01BFH
DISPLAY. . . . . . . . . . . . . . .  N  NUMB  0048H
DISPLAYMEM . . . . . . . . . . . . .  D  ADDR  0032H
DISPLAY_DIGIT. . . . . . . . . . . .  C  ADDR  01ABH
DISPLAY_NUMBER . . . . . . . . . . .  C  ADDR  016FH
DIV16X16 . . . . . . . . . . . . . .  C  ADDR  01C9H
DIVHI. . . . . . . . . . . . . . . .  D  ADDR  0036H
DIVLO. . . . . . . . . . . . . . . .  D  ADDR  0035H
DIV_DONE . . . . . . . . . . . . . .  C  ADDR  0207H
DIV_LOOP16X16. . . . . . . . . . . .  C  ADDR  01D9H
DO_SUBTRACT. . . . . . . . . . . . .  C  ADDR  01ECH
DP0H . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DP0L . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
DP1H . . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
DP1L . . . . . . . . . . . . . . . .  D  ADDR  0084H  NOT USED
DPH. . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DPL. . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
EA . . . . . . . . . . . . . . . . .  B  ADDR  00AFH  NOT USED
EC . . . . . . . . . . . . . . . . .  B  ADDR  00AEH  NOT USED
EECON. . . . . . . . . . . . . . . .  D  ADDR  0096H  NOT USED
ES . . . . . . . . . . . . . . . . .  B  ADDR  00ACH  NOT USED
ET0. . . . . . . . . . . . . . . . .  B  ADDR  00A9H  NOT USED
ET1. . . . . . . . . . . . . . . . .  B  ADDR  00ABH  NOT USED
ET2. . . . . . . . . . . . . . . . .  B  ADDR  00ADH  NOT USED
EX0. . . . . . . . . . . . . . . . .  B  ADDR  00A8H  NOT USED
EX1. . . . . . . . . . . . . . . . .  B  ADDR  00AAH  NOT USED
EXEN2. . . . . . . . . . . . . . . .  B  ADDR  00CBH  NOT USED
EXF2 . . . . . . . . . . . . . . . .  B  ADDR  00CEH  NOT USED
EXTI0. . . . . . . . . . . . . . . .  C  ADDR  0003H  NOT USED
EXTI1. . . . . . . . . . . . . . . .  C  ADDR  0013H  NOT USED
F0 . . . . . . . . . . . . . . . . .  B  ADDR  00D5H  NOT USED
FE . . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
I. . . . . . . . . . . . . . . . . .  N  NUMB  0043H
IE . . . . . . . . . . . . . . . . .  D  ADDR  00A8H  NOT USED
IE0. . . . . . . . . . . . . . . . .  B  ADDR  0089H  NOT USED
IE1. . . . . . . . . . . . . . . . .  B  ADDR  008BH  NOT USED
INIT_CALCULATOR. . . . . . . . . . .  C  ADDR  014AH
INIT_KEYPAD. . . . . . . . . . . . .  C  ADDR  0011H
INT0 . . . . . . . . . . . . . . . .  B  ADDR  00B2H  NOT USED
INT1 . . . . . . . . . . . . . . . .  B  ADDR  00B3H  NOT USED
IP . . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPH. . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH0 . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH1 . . . . . . . . . . . . . . . .  D  ADDR  00B3H  NOT USED
IPL0 . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPL1 . . . . . . . . . . . . . . . .  D  ADDR  00B2H  NOT USED
IT0. . . . . . . . . . . . . . . . .  B  ADDR  0088H  NOT USED
IT1. . . . . . . . . . . . . . . . .  B  ADDR  008AH  NOT USED
KBE. . . . . . . . . . . . . . . . .  D  ADDR  009DH  NOT USED
KBF. . . . . . . . . . . . . . . . .  D  ADDR  009EH  NOT USED
KBLS . . . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
KEYPAD_LINE_LOOP . . . . . . . . . .  C  ADDR  0021H
KEYPAD_MAP_VALUE . . . . . . . . . .  C  ADDR  0038H
KEYPAD_RETURN. . . . . . . . . . . .  C  ADDR  0042H
LAST . . . . . . . . . . . . . . . .  N  NUMB  0041H
MAIN_LOOP. . . . . . . . . . . . . .  C  ADDR  0009H
MAP_TABLE. . . . . . . . . . . . . .  C  ADDR  004AH
MAP_VALUE. . . . . . . . . . . . . .  C  ADDR  0045H
MASK . . . . . . . . . . . . . . . .  N  NUMB  0042H
NUM. . . . . . . . . . . . . . . . .  N  NUMB  0030H
NUMBERHI . . . . . . . . . . . . . .  D  ADDR  0034H
NUMBERLO . . . . . . . . . . . . . .  D  ADDR  0033H
NUMBERMEMHI. . . . . . . . . . . . .  D  ADDR  0031H
NUMBERMEMLO. . . . . . . . . . . . .  D  ADDR  0030H
OSCCON . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
OV . . . . . . . . . . . . . . . . .  B  ADDR  00D2H  NOT USED
P. . . . . . . . . . . . . . . . . .  B  ADDR  00D0H  NOT USED
P0 . . . . . . . . . . . . . . . . .  D  ADDR  0080H  NOT USED
P1 . . . . . . . . . . . . . . . . .  D  ADDR  0090H  NOT USED
P1M1 . . . . . . . . . . . . . . . .  D  ADDR  00D4H  NOT USED
P1M2 . . . . . . . . . . . . . . . .  D  ADDR  00E2H  NOT USED
P2 . . . . . . . . . . . . . . . . .  D  ADDR  00A0H
P3 . . . . . . . . . . . . . . . . .  D  ADDR  00B0H  NOT USED
P3M1 . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
P3M2 . . . . . . . . . . . . . . . .  D  ADDR  00E3H  NOT USED
P4 . . . . . . . . . . . . . . . . .  D  ADDR  00C0H  NOT USED
P4M1 . . . . . . . . . . . . . . . .  D  ADDR  00D6H  NOT USED
P4M2 . . . . . . . . . . . . . . . .  D  ADDR  00E4H  NOT USED
P5 . . . . . . . . . . . . . . . . .  D  ADDR  00E8H  NOT USED
PC . . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PCON . . . . . . . . . . . . . . . .  D  ADDR  0087H  NOT USED
PPCL . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PS . . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSL. . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSW. . . . . . . . . . . . . . . . .  D  ADDR  00D0H  NOT USED
PT0. . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT0L . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT1. . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT1L . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT2. . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PT2L . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PX0. . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX0L . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX1. . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
PX1L . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
QUOTHI . . . . . . . . . . . . . . .  D  ADDR  0038H
QUOTLO . . . . . . . . . . . . . . .  D  ADDR  0037H
RB8. . . . . . . . . . . . . . . . .  B  ADDR  009AH  NOT USED
RCAP2H . . . . . . . . . . . . . . .  D  ADDR  00CBH  NOT USED
RCAP2L . . . . . . . . . . . . . . .  D  ADDR  00CAH  NOT USED
RCLK . . . . . . . . . . . . . . . .  B  ADDR  00CDH  NOT USED
RD . . . . . . . . . . . . . . . . .  B  ADDR  00B7H  NOT USED
READ_KEYPAD. . . . . . . . . . . . .  C  ADDR  0015H
READ_NUMBER. . . . . . . . . . . . .  C  ADDR  014EH
REMHI. . . . . . . . . . . . . . . .  D  ADDR  0034H
REMLO. . . . . . . . . . . . . . . .  D  ADDR  0033H
REN. . . . . . . . . . . . . . . . .  B  ADDR  009CH  NOT USED
RESET. . . . . . . . . . . . . . . .  C  ADDR  0000H  NOT USED
RI . . . . . . . . . . . . . . . . .  B  ADDR  0098H  NOT USED
RS0. . . . . . . . . . . . . . . . .  B  ADDR  00D3H  NOT USED
RS1. . . . . . . . . . . . . . . . .  B  ADDR  00D4H  NOT USED
RXD. . . . . . . . . . . . . . . . .  B  ADDR  00B0H  NOT USED
SADDR. . . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_0. . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_1. . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SADEN. . . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_0. . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_1. . . . . . . . . . . . . . .  D  ADDR  00BAH  NOT USED
SBUF . . . . . . . . . . . . . . . .  D  ADDR  0099H  NOT USED
SCON . . . . . . . . . . . . . . . .  D  ADDR  0098H  NOT USED
SEGMENTSELECTPORT. . . . . . . . . .  N  NUMB  0080H
SEGMENTSHOWPORT. . . . . . . . . . .  N  NUMB  0090H
SINT . . . . . . . . . . . . . . . .  C  ADDR  0023H  NOT USED
SM0. . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
SM1. . . . . . . . . . . . . . . . .  B  ADDR  009EH  NOT USED
SM2. . . . . . . . . . . . . . . . .  B  ADDR  009DH  NOT USED
SP . . . . . . . . . . . . . . . . .  D  ADDR  0081H  NOT USED
SPCON. . . . . . . . . . . . . . . .  D  ADDR  00C3H  NOT USED
SPCR . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
SPDAT. . . . . . . . . . . . . . . .  D  ADDR  00C5H  NOT USED
SPDR . . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
SPSR . . . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SPSTA. . . . . . . . . . . . . . . .  D  ADDR  00C4H  NOT USED
T0 . . . . . . . . . . . . . . . . .  B  ADDR  00B4H  NOT USED
T1 . . . . . . . . . . . . . . . . .  B  ADDR  00B5H  NOT USED
T2CON. . . . . . . . . . . . . . . .  D  ADDR  00C8H  NOT USED
T2MOD. . . . . . . . . . . . . . . .  D  ADDR  00C9H  NOT USED
TB8. . . . . . . . . . . . . . . . .  B  ADDR  009BH  NOT USED
TCLK . . . . . . . . . . . . . . . .  B  ADDR  00CCH  NOT USED
TCON . . . . . . . . . . . . . . . .  D  ADDR  0088H  NOT USED
TF0. . . . . . . . . . . . . . . . .  B  ADDR  008DH  NOT USED
TF1. . . . . . . . . . . . . . . . .  B  ADDR  008FH  NOT USED
TF2. . . . . . . . . . . . . . . . .  B  ADDR  00CFH  NOT USED
TH0. . . . . . . . . . . . . . . . .  D  ADDR  008CH  NOT USED
TH1. . . . . . . . . . . . . . . . .  D  ADDR  008DH  NOT USED
TH2. . . . . . . . . . . . . . . . .  D  ADDR  00CDH  NOT USED
TI . . . . . . . . . . . . . . . . .  B  ADDR  0099H  NOT USED
TIMER0 . . . . . . . . . . . . . . .  C  ADDR  000BH  NOT USED
TIMER1 . . . . . . . . . . . . . . .  C  ADDR  001BH  NOT USED
TIMER2 . . . . . . . . . . . . . . .  C  ADDR  002BH  NOT USED
TL0. . . . . . . . . . . . . . . . .  D  ADDR  008AH  NOT USED
TL1. . . . . . . . . . . . . . . . .  D  ADDR  008BH  NOT USED
TL2. . . . . . . . . . . . . . . . .  D  ADDR  00CCH  NOT USED
TMOD . . . . . . . . . . . . . . . .  D  ADDR  0089H  NOT USED
TR0. . . . . . . . . . . . . . . . .  B  ADDR  008CH  NOT USED
TR1. . . . . . . . . . . . . . . . .  B  ADDR  008EH  NOT USED
TR2. . . . . . . . . . . . . . . . .  B  ADDR  00CAH  NOT USED
TXD. . . . . . . . . . . . . . . . .  B  ADDR  00B1H  NOT USED
WAIT_INNER . . . . . . . . . . . . .  C  ADDR  020CH
WAIT_LOOP. . . . . . . . . . . . . .  C  ADDR  0208H  NOT USED
WAIT_OUTER . . . . . . . . . . . . .  C  ADDR  020AH
WDTCON . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTPRG . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTRST . . . . . . . . . . . . . . .  D  ADDR  00A6H  NOT USED
WR . . . . . . . . . . . . . . . . .  B  ADDR  00B6H  NOT USED
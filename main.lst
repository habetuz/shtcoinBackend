main                                                                                                                    PAGE 1
014C 120014              1     call    init_keypad
0003 1201A0              2     call    clear_display
                         3
  0050                   4     truth   DATA    50h
0006 75B000              5     MOV     P3,     #00h
                         6
                         7     main_loop:
0009 12014D              8             CALL    read_number
                         9
000C 120167             10             CALL    calculate
                        11
000F 8550B0             12             MOV     P3,     truth
                        13
0012 80F5               14             JMP     main_loop
                        15
                        16
                 =1     17     include 'keypad.asm'
                 =1     18     init_keypad:
  0041           =1     19             last    EQU     0x41
0014 7541FF      =1     20             MOV     last,   #0FFH
0017 22          =1     21             RET
                 =1     22
                 =1     23     ;--------------------------------------------------------------------------
                 =1     24     ; Reads the keypad until a button is pressed
                 =1     25     ; Output:
                 =1     26     ;       A: The value of the pressed button
                 =1     27     ; Values:
                 =1     28     ; 00 - 09 -> Numeric vallues 0-9
                 =1     29     ; 10 | 0001 0000 -> A
                 =1     30     ; 20 | 0010 0000 -> B
                 =1     31     ; 40 | 0100 0000 -> C
                 =1     32     ; 80 | 1000 0000 -> D
                 =1     33     ; F0 | 1111 0000 -> #
                 =1     34     ;--------------------------------------------------------------------------
                 =1     35     read_keypad:
0018 1201A7      =1     36             CALL    display_number
                 =1     37             ; Setup
001B 75A0FF      =1     38             MOV     P2,     #0FFH
  0042           =1     39             mask    EQU     0x42
  0043           =1     40             i       EQU     0x43
001E 754304      =1     41             MOV     i,      #4d
0021 7542FE      =1     42             MOV     mask,   #11111110b
                 =1     43             ; Loop i times
                 =1     44     keypad_line_loop:
0024 8542A0      =1     45             MOV     P2,     mask
                 =1     46
                 =1     47             ; Check wether a key in this line is pressed
0027 E5A0        =1     48             MOV     A,      P2
0029 54F0        =1     49             ANL     A,      #0F0H
002B B4F00D      =1     50             CJNE    A, #0F0h, keypad_map_value ; Found a pressed key
                 =1     51
                 =1     52             ; Shift mask one to the left (read next line)
002E E542        =1     53             MOV     A,      mask
0030 23          =1     54             RL      A
0031 F542        =1     55             MOV     mask,   A
                 =1     56
                 =1     57             ; Decrement loop counter
0033 D543EE      =1     58             DJNZ    i,      keypad_line_loop
                 =1     59             ; No key pressed in this iteration
0036 7541FF      =1     60             MOV     last,   #0FFH
0039 80DD        =1     61             JMP     read_keypad ; Read again
                 =1     62     keypad_map_value:
003B E5A0        =1     63             MOV     A,      P2
003D 120048      =1     64             CALL    map_value ; A contains the mapped value now
0040 B54102      =1     65             CJNE    A, last, keypad_return ; Read the same value as last time (no change)
0043 80D3        =1     66             JMP     read_keypad
                 =1     67     keypad_return:
0045 F541        =1     68             MOV     last,   A
0047 22          =1     69             RET ; A is a new value, return
                 =1     70
                 =1     71     ;--------------------------------------------------------------------------
                 =1     72     ; Maps value of A to another value listed in "map_table"
                 =1     73     ; input:
                 =1     74     ;       A: The value to map
                 =1     75     ; output:
                 =1     76     ;       A: The mapped value
                 =1     77     ;--------------------------------------------------------------------------
                 =1     78     map_value:
0048 90004D      =1     79             MOV     DPTR,   #map_table      ; point DPTR at start of table
                 =1     80             ; A already contains your input byte
004B 93          =1     81             MOVC    A,      @A+DPTR        ; A := map_table[A]
004C 22          =1     82             RET
                 =1     83
                 =1     84
                 =1     85     ;--------------------------------------------------------------------------
                 =1     86     ; 256-byte mapping table in code memory
                 =1     87     ; index = input value in A
                 =1     88     ; value = mapped output
                 =1     89     ;--------------------------------------------------------------------------
                 =1     90     map_table:
004D FFFFFFFFFF  =1     91             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
005D FFFFFFFFFF  =1     92             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
006D FFFFFFFFFF  =1     93             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
007D FFFFFFFFFF  =1     94             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
008D FFFFFFFFFF  =1     95             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
009D FFFFFFFFFF  =1     96             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
00AD FFFFFFFFFF  =1     97             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
00BD FFFFFFFFFF  =1     98             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 80h,  0FFh, 0FFh, 0FFh, 40h,  0FFh, 20h,  10h,
     FFFF80FFFF
     FF40FF2010
     FF
00CD FFFFFFFFFF  =1     99             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
00DD FFFFFFFFFF  =1    100             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
00ED FFFFFFFFFF  =1    101             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
00FD FFFFFFFFFF  =1    102             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F0h, 0FFh, 0FFh, 0FFh, 09h,  0FFh, 06h,  03h,
     FFFFF0FFFF
     FF09FF0603
     FF
010D FFFFFFFFFF  =1    103             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
011D FFFFFFFFFF  =1    104             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 00h,  0FFh, 0FFh, 0FFh, 08h,  0FFh, 05h,  02h,
     FFFF00FFFF
     FF08FF0502
     FF
012D FFFFFFFFFF  =1    105             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 07h,  0FFh, 04h,  01h,
     FFFFFFFFFF
     FF07FF0401
     FF
013D FFFFFFFFFF  =1    106             DB 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
     FFFFFFFFFF
     FFFFFFFFFF
     FF
                 =1    107
                 =1    108      ;include 'display.asm'
                 =1    109     include 'calculator.asm'
                 =1    110     ;--------------------------------------------------------------------------
                 =1    111     ; Reads numbers until an action key is pressed
                 =1    112     ; Outputs:
                 =1    113     ;       A: The read number
                 =1    114     ;       B: The action key terminating the input (see keypad)
                 =1    115     ;--------------------------------------------------------------------------
                 =1    116     read_number:
  0030           =1    117             num     EQU     0x30
014D 753000      =1    118             MOV     num,    #00h
                 =1    119     calculator_read_number_loop:
0150 1118        =1    120             CALL    read_keypad
0152 F8          =1    121             MOV     R0,     A
0153 54F0        =1    122             ANL     A,      #0F0h
0155 700B        =1    123             JNZ     calculator_ret ; Actions are not 0 -> handle end of number reading
0157 E530        =1    124             MOV     A,      num
0159 75F00A      =1    125             MOV     B,      #10d
015C A4          =1    126             MUL     AB
015D 28          =1    127             ADD     A,      R0
015E F530        =1    128             MOV     num,    A
0160 80EE        =1    129             JMP     calculator_read_number_loop
                 =1    130     calculator_ret:
0162 E530        =1    131             MOV     A,      num
0164 88F0        =1    132             MOV     B,      R0
0166 22          =1    133             RET
                 =1    134
                 =1    135     ;--------------------------------------------------------------------------
                 =1    136     ; Calculates the new truth given a number and operation
                 =1    137     ; Inputs:
                 =1    138     ;       A: The number
                 =1    139     ;       B: The operation (see keypad)
                 =1    140     ; Side effect:
                 =1    141     ;       Outputs the calculation to the truth data
                 =1    142     ;--------------------------------------------------------------------------
                 =1    143     calculate:
0167 F8          =1    144             MOV     R0,     A
0168 E5F0        =1    145             MOV     A,      B
016A C4          =1    146             SWAP    A
016B B40F03      =1    147             CJNE    A, #1111b, check_plus
016E 020183      =1    148             JMP     op_equal
                 =1    149     check_plus:
0171 B40103      =1    150             CJNE    A, #0001b, check_minus
0174 020184      =1    151             JMP     op_add
                 =1    152     check_minus:
0177 B40203      =1    153             CJNE    A, #0010b, check_multiply
017A 02018A      =1    154             JMP     op_minus
                 =1    155     check_multiply:
017D B40418      =1    156             CJNE    A, #0100b, op_divide
0180 020190      =1    157             JMP     op_multiply
                 =1    158
                 =1    159     op_equal:
                 =1    160             ; MOV   truth,  R0
0183 22          =1    161             RET
                 =1    162
                 =1    163     op_add:
0184 E550        =1    164             MOV     A,      truth
0186 28          =1    165             ADD     A,      R0
0187 F550        =1    166             MOV     truth,  A
0189 22          =1    167             RET
                 =1    168
                 =1    169     op_minus:
018A E550        =1    170             MOV     A,      truth
018C 98          =1    171             SUBB    A,      R0
018D F550        =1    172             MOV     truth,  A
018F 22          =1    173             RET
                 =1    174
                 =1    175     op_multiply:
0190 E550        =1    176             MOV     A,      truth
0192 88F0        =1    177             MOV     B,      R0
0194 A4          =1    178             MUL     AB
0195 F550        =1    179             MOV     truth,  A
0197 22          =1    180             RET
                 =1    181
                 =1    182     op_divide:
0198 E550        =1    183             MOV     A,      truth
019A 88F0        =1    184             MOV     B,      R0
019C 84          =1    185             DIV     AB
019D F550        =1    186             MOV     truth,  A
019F 22          =1    187             RET
                 =1    188
                 =1    189     include 'display.asm'
                 =1    190     ;--------------------------------------
                 =1    191     ; Declarations
                 =1    192     ;--------------------------------------
                 =1    193     ; Interopt Declarations
  0030           =1    194     numberMemLo DATA 30h
  0031           =1    195     numberMemHi DATA 31h
  0032           =1    196     displayMem DATA 32h
                 =1    197
                 =1    198     ; Port Declarations
  0080           =1    199     segmentSelectPort EQU P0
  0090           =1    200     segmentShowPort EQU P1
                 =1    201
                 =1    202     ; Declarations for Division
  0033           =1    203     numberLo DATA 33h
  0034           =1    204     numberHi DATA 34h
  0035           =1    205     divLo DATA 35h
  0036           =1    206     divHi DATA 36h
  0037           =1    207     quotLo DATA 37h
  0038           =1    208     quotHi DATA 38h
  0033           =1    209     remLo DATA 33h
  0034           =1    210     remHi DATA 34h
                 =1    211
                 =1    212     ;--------------------------------------
                 =1    213     ; Display
                 =1    214     ;--------------------------------------
                 =1    215     clear_display:
01A0 759000      =1    216         MOV segmentShowPort, #00h
01A3 758000      =1    217         MOV segmentSelectPort, #00h
01A6 22          =1    218         RET
                 =1    219
                 =1    220     display_number:
                 =1    221         ; DIV 1000
01A7 853134      =1    222         MOV numberHi, numberMemHi
01AA 853033      =1    223         MOV numberLo, numberMemLo
01AD 753603      =1    224         MOV divHi, #03h
01B0 7535E8      =1    225         MOV divLo, #0E8h
01B3 120201      =1    226         CALL div16x16
                 =1    227
01B6 E537        =1    228         MOV A, quotLo
01B8 2480        =1    229         ADD A, #80h
01BA F532        =1    230         MOV displayMem, A
01BC 1201E3      =1    231         CALL display_digit
                 =1    232
                 =1    233         ; DIV 100
01BF E533        =1    234         MOV A, remLo
01C1 75F064      =1    235         MOV B, #64h
01C4 84          =1    236         DIV AB
01C5 2440        =1    237         ADD A, #40h
01C7 F532        =1    238         MOV displayMem, A
01C9 1201E3      =1    239         CALL display_digit
                 =1    240
                 =1    241         ; DIV 10
01CC E5F0        =1    242         MOV A, B
01CE 75F00A      =1    243         MOV B, #0Ah
01D1 84          =1    244         DIV AB
01D2 2420        =1    245         ADD A, #20h
01D4 F532        =1    246         MOV displayMem, A
01D6 1201E3      =1    247         CALL display_digit
                 =1    248
                 =1    249         ; REMAINING
01D9 E5F0        =1    250         MOV A, B
01DB 2410        =1    251         ADD A, #10h
01DD F532        =1    252         MOV displayMem, A
01DF 1201E3      =1    253         CALL display_digit
                 =1    254
01E2 22          =1    255         RET
                 =1    256
                 =1    257     ; Reads displayMem where 000[3 bits pos][4 bits for digit] and sets P1 and P0 corresponding
                 =1    258     ;   posBits: [3rd pos][2nd pos][1st pos][0th pos]
                 =1    259     ;   digitBits: just binary counting up 0-9
                 =1    260     display_digit:
                 =1    261         ; get digit in dec
01E3 E532        =1    262         MOV A, displayMem
01E5 540F        =1    263         ANL A, #0Fh ; A = 0-9
                 =1    264
                 =1    265         ; set P0(segments)
01E7 9001F7      =1    266         MOV DPTR, #DEC_SEGMENT_MAP
01EA 93          =1    267         MOVC A, @A+DPTR
01EB F580        =1    268         MOV segmentSelectPort, A
                 =1    269
                 =1    270         ; get pos and set P1(position)
01ED E532        =1    271         MOV A, displayMem
01EF C4          =1    272         SWAP A
01F0 540F        =1    273         ANL A, #0Fh
01F2 F590        =1    274         MOV segmentShowPort, A
                 =1    275
01F4 31A0        =1    276         CALL clear_display
01F6 22          =1    277         RET
                 =1    278
                 =1    279     ; Mapping Segmente auf P1
                 =1    280     ; A -> 7.bit
                 =1    281     ; B -> 6.bit
                 =1    282     ; C -> 5.bit
                 =1    283     ; D -> 4.bit
                 =1    284     ; E -> 3.bit
                 =1    285     ; F -> 2.bit
                 =1    286     ; G -> 1.bit
                 =1    287     ; P -> 0.bit
                 =1    288     DEC_SEGMENT_MAP:
01F7 FC          =1    289         DB 0xFC ; 0 -> A B C D E F           = 11111100
01F8 60          =1    290         DB 0x60 ; 1 ->   B C                 = 01100000
01F9 DA          =1    291         DB 0xDA ; 2 -> A B   D E   G         = 11011010
01FA F2          =1    292         DB 0xF2 ; 3 -> A B C D     G         = 11110010
01FB 66          =1    293         DB 0x66 ; 4 ->   B C     F G         = 01100110
01FC B6          =1    294         DB 0xB6 ; 5 -> A   C D   F G         = 10110110
01FD BE          =1    295         DB 0xBE ; 6 -> A   C D E F G         = 10111110
01FE E0          =1    296         DB 0xE0 ; 7 -> A B C                 = 11100000
01FF FE          =1    297         DB 0xFE ; 8 -> A B C D E F G         = 11111110
0200 F6          =1    298         DB 0xF6 ; 9 -> A B C D   F G         = 11110110
                 =1    299
                 =1    300
                 =1    301
                 =1    302     ;--------------------------------------
                 =1    303     ; 16x16 Division
                 =1    304     ;--------------------------------------
                 =1    305     div16x16:
                 =1    306        ; Rem equ DIV
0201 853333      =1    307        MOV remLo, numberLo
0204 853434      =1    308        MOV remHi, numberHi
                 =1    309
                 =1    310         ; Quot init 0
0207 753700      =1    311         MOV quotLo, #0
020A 753800      =1    312         MOV quotHi, #0
                 =1    313
020D 120211      =1    314         CALL div_loop16x16
0210 22          =1    315         RET
                 =1    316
                 =1    317     div_loop16x16:
                 =1    318         ; Prüfe ob Rest >= Divisor (16-Bit Vergleich)
                 =1    319
0211 E534        =1    320         MOV A, remHi
0213 C3          =1    321         CLR C
0214 9536        =1    322         SUBB A, divHi
0216 4027        =1    323         JC div_done       ; Rest High < Divisor High → Rest < Divisor
                 =1    324
0218 6003        =1    325         JZ check_low      ; Wenn equal, prüfe Low-Bytes
                 =1    326
                 =1    327         ; Rest High > Divisor High → subtrahieren möglich
021A 020224      =1    328         JMP do_subtract
                 =1    329
                 =1    330     check_low:
021D E533        =1    331         MOV A, remLo
021F C3          =1    332         CLR C
0220 9535        =1    333         SUBB A, divLo
0222 401B        =1    334         JC div_done       ; Rest Low < Divisor Low → Rest < Divisor
                 =1    335
                 =1    336         ; Rest >= Divisor → Subtraktion möglich
                 =1    337
                 =1    338     do_subtract:
                 =1    339         ; Subtrahiere Divisor von Rest
0224 E533        =1    340         MOV A, remLo
0226 C3          =1    341         CLR C
0227 9535        =1    342         SUBB A, divLo
0229 F533        =1    343         MOV remLo, A
                 =1    344
022B E534        =1    345         MOV A, remHi
022D 9536        =1    346         SUBB A, divHi
022F F534        =1    347         MOV remHi, A
                 =1    348
                 =1    349         ; Quotient erhöhen (16-Bit)
0231 E537        =1    350         MOV A, quotLo
0233 04          =1    351         INC A
0234 F537        =1    352         MOV quotLo, A
0236 7005        =1    353         JNZ continue_loop
                 =1    354         ; Überlauf in Low-Byte → High-Byte erhöhen
0238 E538        =1    355         MOV A, quotHi
023A 04          =1    356         INC A
023B F538        =1    357         MOV quotHi, A
                 =1    358
                 =1    359     continue_loop:
023D 80D2        =1    360         JMP div_loop16x16
                 =1    361
                 =1    362     div_done:
023F 22          =1    363         RET
                 =1    364
                 =1    365
                 =1    366     END
ASSEMBLY COMPLETE, NO ERRORS FOUND, NO WARNINGS


SYMBOL TABLE:
??MCU_8051_IDE . . . . . . . . . . .  N  NUMB  8051H  NOT USED
??VERSION. . . . . . . . . . . . . .  N  NUMB  0149H  NOT USED
AC . . . . . . . . . . . . . . . . .  B  ADDR  00D6H  NOT USED
ACC. . . . . . . . . . . . . . . . .  D  ADDR  00E0H  NOT USED
ACSR . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
ADCF . . . . . . . . . . . . . . . .  D  ADDR  00F6H  NOT USED
ADCLK. . . . . . . . . . . . . . . .  D  ADDR  00F2H  NOT USED
ADCON. . . . . . . . . . . . . . . .  D  ADDR  00F3H  NOT USED
ADDH . . . . . . . . . . . . . . . .  D  ADDR  00F5H  NOT USED
ADDL . . . . . . . . . . . . . . . .  D  ADDR  00F4H  NOT USED
AUXR . . . . . . . . . . . . . . . .  D  ADDR  008EH  NOT USED
AUXR1. . . . . . . . . . . . . . . .  D  ADDR  00A2H  NOT USED
B. . . . . . . . . . . . . . . . . .  D  ADDR  00F0H
BDRCON . . . . . . . . . . . . . . .  D  ADDR  009BH  NOT USED
BDRCON_1 . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
BRL. . . . . . . . . . . . . . . . .  D  ADDR  009AH  NOT USED
CALCULATE. . . . . . . . . . . . . .  C  ADDR  0167H
CALCULATOR_READ_NUMBER_LOOP. . . . .  C  ADDR  0150H
CALCULATOR_RET . . . . . . . . . . .  C  ADDR  0162H
CCAP0H . . . . . . . . . . . . . . .  D  ADDR  00FAH  NOT USED
CCAP0L . . . . . . . . . . . . . . .  D  ADDR  00EAH  NOT USED
CCAP1H . . . . . . . . . . . . . . .  D  ADDR  00FBH  NOT USED
CCAP1L . . . . . . . . . . . . . . .  D  ADDR  00EBH  NOT USED
CCAP2H . . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAP3H . . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAP4H . . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL2H. . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAPL2L. . . . . . . . . . . . . . .  D  ADDR  00ECH  NOT USED
CCAPL3H. . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAPL3L. . . . . . . . . . . . . . .  D  ADDR  00EDH  NOT USED
CCAPL4H. . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL4L. . . . . . . . . . . . . . .  D  ADDR  00EEH  NOT USED
CCAPM0 . . . . . . . . . . . . . . .  D  ADDR  00DAH  NOT USED
CCAPM1 . . . . . . . . . . . . . . .  D  ADDR  00DBH  NOT USED
CCAPM2 . . . . . . . . . . . . . . .  D  ADDR  00DCH  NOT USED
CCAPM3 . . . . . . . . . . . . . . .  D  ADDR  00DDH  NOT USED
CCAPM4 . . . . . . . . . . . . . . .  D  ADDR  00DEH  NOT USED
CCF0 . . . . . . . . . . . . . . . .  B  ADDR  00D8H  NOT USED
CCF1 . . . . . . . . . . . . . . . .  B  ADDR  00D9H  NOT USED
CCF2 . . . . . . . . . . . . . . . .  B  ADDR  00DAH  NOT USED
CCF3 . . . . . . . . . . . . . . . .  B  ADDR  00DBH  NOT USED
CCF4 . . . . . . . . . . . . . . . .  B  ADDR  00DCH  NOT USED
CCON . . . . . . . . . . . . . . . .  D  ADDR  00D8H  NOT USED
CFINT. . . . . . . . . . . . . . . .  C  ADDR  0033H  NOT USED
CH . . . . . . . . . . . . . . . . .  D  ADDR  00F9H  NOT USED
CHECK_LOW. . . . . . . . . . . . . .  C  ADDR  021DH
CHECK_MINUS. . . . . . . . . . . . .  C  ADDR  0177H
CHECK_MULTIPLY . . . . . . . . . . .  C  ADDR  017DH
CHECK_PLUS . . . . . . . . . . . . .  C  ADDR  0171H
CKCON. . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKCON0 . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKRL . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
CKSEL. . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
CL . . . . . . . . . . . . . . . . .  D  ADDR  00E9H  NOT USED
CLEAR_DISPLAY. . . . . . . . . . . .  C  ADDR  01A0H
CLKREG . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CMOD . . . . . . . . . . . . . . . .  D  ADDR  00D9H  NOT USED
CONTINUE_LOOP. . . . . . . . . . . .  C  ADDR  023DH
CPRL2. . . . . . . . . . . . . . . .  B  ADDR  00C8H  NOT USED
CR . . . . . . . . . . . . . . . . .  B  ADDR  00DEH  NOT USED
CT2. . . . . . . . . . . . . . . . .  B  ADDR  00C9H  NOT USED
CY . . . . . . . . . . . . . . . . .  B  ADDR  00D7H  NOT USED
DEC_SEGMENT_MAP. . . . . . . . . . .  C  ADDR  01F7H
DISPLAYMEM . . . . . . . . . . . . .  D  ADDR  0032H
DISPLAY_DIGIT. . . . . . . . . . . .  C  ADDR  01E3H
DISPLAY_NUMBER . . . . . . . . . . .  C  ADDR  01A7H
DIV16X16 . . . . . . . . . . . . . .  C  ADDR  0201H
DIVHI. . . . . . . . . . . . . . . .  D  ADDR  0036H
DIVLO. . . . . . . . . . . . . . . .  D  ADDR  0035H
DIV_DONE . . . . . . . . . . . . . .  C  ADDR  023FH
DIV_LOOP16X16. . . . . . . . . . . .  C  ADDR  0211H
DO_SUBTRACT. . . . . . . . . . . . .  C  ADDR  0224H
DP0H . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DP0L . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
DP1H . . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
DP1L . . . . . . . . . . . . . . . .  D  ADDR  0084H  NOT USED
DPH. . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DPL. . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
EA . . . . . . . . . . . . . . . . .  B  ADDR  00AFH  NOT USED
EC . . . . . . . . . . . . . . . . .  B  ADDR  00AEH  NOT USED
EECON. . . . . . . . . . . . . . . .  D  ADDR  0096H  NOT USED
ES . . . . . . . . . . . . . . . . .  B  ADDR  00ACH  NOT USED
ET0. . . . . . . . . . . . . . . . .  B  ADDR  00A9H  NOT USED
ET1. . . . . . . . . . . . . . . . .  B  ADDR  00ABH  NOT USED
ET2. . . . . . . . . . . . . . . . .  B  ADDR  00ADH  NOT USED
EX0. . . . . . . . . . . . . . . . .  B  ADDR  00A8H  NOT USED
EX1. . . . . . . . . . . . . . . . .  B  ADDR  00AAH  NOT USED
EXEN2. . . . . . . . . . . . . . . .  B  ADDR  00CBH  NOT USED
EXF2 . . . . . . . . . . . . . . . .  B  ADDR  00CEH  NOT USED
EXTI0. . . . . . . . . . . . . . . .  C  ADDR  0003H  NOT USED
EXTI1. . . . . . . . . . . . . . . .  C  ADDR  0013H  NOT USED
F0 . . . . . . . . . . . . . . . . .  B  ADDR  00D5H  NOT USED
FE . . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
I. . . . . . . . . . . . . . . . . .  N  NUMB  0043H
IE . . . . . . . . . . . . . . . . .  D  ADDR  00A8H  NOT USED
IE0. . . . . . . . . . . . . . . . .  B  ADDR  0089H  NOT USED
IE1. . . . . . . . . . . . . . . . .  B  ADDR  008BH  NOT USED
INIT_KEYPAD. . . . . . . . . . . . .  C  ADDR  0014H
INT0 . . . . . . . . . . . . . . . .  B  ADDR  00B2H  NOT USED
INT1 . . . . . . . . . . . . . . . .  B  ADDR  00B3H  NOT USED
IP . . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPH. . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH0 . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH1 . . . . . . . . . . . . . . . .  D  ADDR  00B3H  NOT USED
IPL0 . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPL1 . . . . . . . . . . . . . . . .  D  ADDR  00B2H  NOT USED
IT0. . . . . . . . . . . . . . . . .  B  ADDR  0088H  NOT USED
IT1. . . . . . . . . . . . . . . . .  B  ADDR  008AH  NOT USED
KBE. . . . . . . . . . . . . . . . .  D  ADDR  009DH  NOT USED
KBF. . . . . . . . . . . . . . . . .  D  ADDR  009EH  NOT USED
KBLS . . . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
KEYPAD_LINE_LOOP . . . . . . . . . .  C  ADDR  0024H
KEYPAD_MAP_VALUE . . . . . . . . . .  C  ADDR  003BH
KEYPAD_RETURN. . . . . . . . . . . .  C  ADDR  0045H
LAST . . . . . . . . . . . . . . . .  N  NUMB  0041H
MAIN_LOOP. . . . . . . . . . . . . .  C  ADDR  0009H
MAP_TABLE. . . . . . . . . . . . . .  C  ADDR  004DH
MAP_VALUE. . . . . . . . . . . . . .  C  ADDR  0048H
MASK . . . . . . . . . . . . . . . .  N  NUMB  0042H
NUM. . . . . . . . . . . . . . . . .  N  NUMB  0030H
NUMBERHI . . . . . . . . . . . . . .  D  ADDR  0034H
NUMBERLO . . . . . . . . . . . . . .  D  ADDR  0033H
NUMBERMEMHI. . . . . . . . . . . . .  D  ADDR  0031H
NUMBERMEMLO. . . . . . . . . . . . .  D  ADDR  0030H
OP_ADD . . . . . . . . . . . . . . .  C  ADDR  0184H
OP_DIVIDE. . . . . . . . . . . . . .  C  ADDR  0198H
OP_EQUAL . . . . . . . . . . . . . .  C  ADDR  0183H
OP_MINUS . . . . . . . . . . . . . .  C  ADDR  018AH
OP_MULTIPLY. . . . . . . . . . . . .  C  ADDR  0190H
OSCCON . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
OV . . . . . . . . . . . . . . . . .  B  ADDR  00D2H  NOT USED
P. . . . . . . . . . . . . . . . . .  B  ADDR  00D0H  NOT USED
P0 . . . . . . . . . . . . . . . . .  D  ADDR  0080H  NOT USED
P1 . . . . . . . . . . . . . . . . .  D  ADDR  0090H  NOT USED
P1M1 . . . . . . . . . . . . . . . .  D  ADDR  00D4H  NOT USED
P1M2 . . . . . . . . . . . . . . . .  D  ADDR  00E2H  NOT USED
P2 . . . . . . . . . . . . . . . . .  D  ADDR  00A0H
P3 . . . . . . . . . . . . . . . . .  D  ADDR  00B0H
P3M1 . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
P3M2 . . . . . . . . . . . . . . . .  D  ADDR  00E3H  NOT USED
P4 . . . . . . . . . . . . . . . . .  D  ADDR  00C0H  NOT USED
P4M1 . . . . . . . . . . . . . . . .  D  ADDR  00D6H  NOT USED
P4M2 . . . . . . . . . . . . . . . .  D  ADDR  00E4H  NOT USED
P5 . . . . . . . . . . . . . . . . .  D  ADDR  00E8H  NOT USED
PC . . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PCON . . . . . . . . . . . . . . . .  D  ADDR  0087H  NOT USED
PPCL . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PS . . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSL. . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSW. . . . . . . . . . . . . . . . .  D  ADDR  00D0H  NOT USED
PT0. . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT0L . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT1. . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT1L . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT2. . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PT2L . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PX0. . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX0L . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX1. . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
PX1L . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
QUOTHI . . . . . . . . . . . . . . .  D  ADDR  0038H
QUOTLO . . . . . . . . . . . . . . .  D  ADDR  0037H
RB8. . . . . . . . . . . . . . . . .  B  ADDR  009AH  NOT USED
RCAP2H . . . . . . . . . . . . . . .  D  ADDR  00CBH  NOT USED
RCAP2L . . . . . . . . . . . . . . .  D  ADDR  00CAH  NOT USED
RCLK . . . . . . . . . . . . . . . .  B  ADDR  00CDH  NOT USED
RD . . . . . . . . . . . . . . . . .  B  ADDR  00B7H  NOT USED
READ_KEYPAD. . . . . . . . . . . . .  C  ADDR  0018H
READ_NUMBER. . . . . . . . . . . . .  C  ADDR  014DH
REMHI. . . . . . . . . . . . . . . .  D  ADDR  0034H
REMLO. . . . . . . . . . . . . . . .  D  ADDR  0033H
REN. . . . . . . . . . . . . . . . .  B  ADDR  009CH  NOT USED
RESET. . . . . . . . . . . . . . . .  C  ADDR  0000H  NOT USED
RI . . . . . . . . . . . . . . . . .  B  ADDR  0098H  NOT USED
RS0. . . . . . . . . . . . . . . . .  B  ADDR  00D3H  NOT USED
RS1. . . . . . . . . . . . . . . . .  B  ADDR  00D4H  NOT USED
RXD. . . . . . . . . . . . . . . . .  B  ADDR  00B0H  NOT USED
SADDR. . . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_0. . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_1. . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SADEN. . . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_0. . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_1. . . . . . . . . . . . . . .  D  ADDR  00BAH  NOT USED
SBUF . . . . . . . . . . . . . . . .  D  ADDR  0099H  NOT USED
SCON . . . . . . . . . . . . . . . .  D  ADDR  0098H  NOT USED
SEGMENTSELECTPORT. . . . . . . . . .  N  NUMB  0080H
SEGMENTSHOWPORT. . . . . . . . . . .  N  NUMB  0090H
SINT . . . . . . . . . . . . . . . .  C  ADDR  0023H  NOT USED
SM0. . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
SM1. . . . . . . . . . . . . . . . .  B  ADDR  009EH  NOT USED
SM2. . . . . . . . . . . . . . . . .  B  ADDR  009DH  NOT USED
SP . . . . . . . . . . . . . . . . .  D  ADDR  0081H  NOT USED
SPCON. . . . . . . . . . . . . . . .  D  ADDR  00C3H  NOT USED
SPCR . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
SPDAT. . . . . . . . . . . . . . . .  D  ADDR  00C5H  NOT USED
SPDR . . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
SPSR . . . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SPSTA. . . . . . . . . . . . . . . .  D  ADDR  00C4H  NOT USED
T0 . . . . . . . . . . . . . . . . .  B  ADDR  00B4H  NOT USED
T1 . . . . . . . . . . . . . . . . .  B  ADDR  00B5H  NOT USED
T2CON. . . . . . . . . . . . . . . .  D  ADDR  00C8H  NOT USED
T2MOD. . . . . . . . . . . . . . . .  D  ADDR  00C9H  NOT USED
TB8. . . . . . . . . . . . . . . . .  B  ADDR  009BH  NOT USED
TCLK . . . . . . . . . . . . . . . .  B  ADDR  00CCH  NOT USED
TCON . . . . . . . . . . . . . . . .  D  ADDR  0088H  NOT USED
TF0. . . . . . . . . . . . . . . . .  B  ADDR  008DH  NOT USED
TF1. . . . . . . . . . . . . . . . .  B  ADDR  008FH  NOT USED
TF2. . . . . . . . . . . . . . . . .  B  ADDR  00CFH  NOT USED
TH0. . . . . . . . . . . . . . . . .  D  ADDR  008CH  NOT USED
TH1. . . . . . . . . . . . . . . . .  D  ADDR  008DH  NOT USED
TH2. . . . . . . . . . . . . . . . .  D  ADDR  00CDH  NOT USED
TI . . . . . . . . . . . . . . . . .  B  ADDR  0099H  NOT USED
TIMER0 . . . . . . . . . . . . . . .  C  ADDR  000BH  NOT USED
TIMER1 . . . . . . . . . . . . . . .  C  ADDR  001BH  NOT USED
TIMER2 . . . . . . . . . . . . . . .  C  ADDR  002BH  NOT USED
TL0. . . . . . . . . . . . . . . . .  D  ADDR  008AH  NOT USED
TL1. . . . . . . . . . . . . . . . .  D  ADDR  008BH  NOT USED
TL2. . . . . . . . . . . . . . . . .  D  ADDR  00CCH  NOT USED
TMOD . . . . . . . . . . . . . . . .  D  ADDR  0089H  NOT USED
TR0. . . . . . . . . . . . . . . . .  B  ADDR  008CH  NOT USED
TR1. . . . . . . . . . . . . . . . .  B  ADDR  008EH  NOT USED
TR2. . . . . . . . . . . . . . . . .  B  ADDR  00CAH  NOT USED
TRUTH. . . . . . . . . . . . . . . .  D  ADDR  0050H
TXD. . . . . . . . . . . . . . . . .  B  ADDR  00B1H  NOT USED
WDTCON . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTPRG . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTRST . . . . . . . . . . . . . . .  D  ADDR  00A6H  NOT USED
WR . . . . . . . . . . . . . . . . .  B  ADDR  00B6H  NOT USED